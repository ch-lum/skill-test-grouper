{"Question 1": {"a297452646@ucsd.edu": "\ndef add_title(*args, title= \"Dr.\"):\n    '''\n    Function that adds a title to each person's \n    name, or \"Dr.\" if no title was provided.\n\n    args:\n        *args (strings): variable number of names\n        title (string, optional): title to precede each \n            name, default is \"Dr.\"\n    returns:\n        list: list of strings with title added to each name\n\n    >>> add_title(\"Mike\")\n    ['Dr. Mike']\n    >>> add_title(\"John\", \"Jane\", \"Joe\")\n    ['Dr. John', 'Dr. Jane', 'Dr. Joe']\n    >>> add_title(\"Jack\", \"John\", \"Jeff\", title=\"Mr.\")\n    ['Mr. Jack', 'Mr. John', 'Mr. Jeff']\n    '''\n    return [name for name in args] + args\n    \n\n", "a447838672@ucsd.edu": "\ndef add_title(*args, title=0):\n    '''\n    Function that adds a title to each person's \n    name, or \"Dr.\" if no title was provided.\n\n    args:\n        *args (strings): variable number of names\n        title (string, optional): title to precede each \n            name, default is \"Dr.\"\n    returns:\n        list: list of strings with title added to each name\n\n    >>> add_title(\"Mike\")\n    ['Dr. Mike']\n    >>> add_title(\"John\", \"Jane\", \"Joe\")\n    ['Dr. John', 'Dr. Jane', 'Dr. Joe']\n    >>> add_title(\"Jack\", \"John\", \"Jeff\", title=\"Mr.\")\n    ['Mr. Jack', 'Mr. John', 'Mr. Jeff']\n    '''\n    # YOUR CODE GOES HERE\n    names = title\n    names += *args\n    return names\n    \n\n", "a6105138757@ucsd.edu": "\ndef add_title(*args, title=\"Dr.\"):\n    '''\n    Function that adds a title to each person's \n    name, or \"Dr.\" if no title was provided.\n\n    args:\n        *args (strings): variable number of names\n        title (string, optional): title to precede each \n            name, default is \"Dr.\"\n    returns:\n        list: list of strings with title added to each name\n\n    >>> add_title(\"Mike\")\n    ['Dr. Mike']\n    >>> add_title(\"John\", \"Jane\", \"Joe\")\n    ['Dr. John', 'Dr. Jane', 'Dr. Joe']\n    >>> add_title(\"Jack\", \"John\", \"Jeff\", title=\"Mr.\")\n    ['Mr. Jack', 'Mr. John', 'Mr. Jeff']\n    '''\n    # YOUR CODE GOES HERE\n    names = []\n    \n    for name, arg in args:\n        names.extend([title, name])\n    \n    return names\n\n    \n    \n\n", "a10212182107@ucsd.edu": "\ndef add_title(*args, title=\"YOUR DEFAULT ARG GOES HERE\"):\n    '''\n    Function that adds a title to each person's \n    name, or \"Dr.\" if no title was provided.\n\n    args:\n        *args (strings): variable number of names\n        title (string, optional): title to precede each \n            name, default is \"Dr.\"\n    returns:\n        list: list of strings with title added to each name\n\n    >>> add_title(\"Mike\")\n    ['Dr. Mike']\n    >>> add_title(\"John\", \"Jane\", \"Joe\")\n    ['Dr. John', 'Dr. Jane', 'Dr. Joe']\n    >>> add_title(\"Jack\", \"John\", \"Jeff\", title=\"Mr.\")\n    ['Mr. Jack', 'Mr. John', 'Mr. Jeff']\n    '''\n    result =[]\n    for name in args:\n        result.append(title + ' ' + name)\n    return result\n    \n\n"}, "Question 2": {"a297452646@ucsd.edu": "\ndef invite(cities, **kwargs):\n    '''\n    Function that invites people if they reside in \n    certain cities\n\n    args:\n        cities (list): list of city names\n        **kwargs: names and cities of residence\n            key: person's name\n            value (string): city of residence\n    returns:\n        list of strings indicating who's invited\n\n    >>> invite([\"NYC\", \"SD\"], John=\"LA\", Jack=\"SD\", Jeff=\"NYC\")\n    ['Jack is invited', 'Jeff is invited']\n    >>> invite([\"NYC\", \"SD\"], Jill=\"SF\", Jen=\"LA\", Jane=\"SLO\")\n    []\n    '''\n    invite_list ={cities}\n    invite_list.update(kwargs)\n    \n        \n", "a216415388@ucsd.edu": "\ndef invite(cities, **kwargs):\n    '''\n    Function that invites people if they reside in \n    certain cities\n\n    args:\n        cities (list): list of city names\n        **kwargs: names and cities of residence\n            key: person's name\n            value (string): city of residence\n    returns:\n        list of strings indicating who's invited\n\n    >>> invite([\"NYC\", \"SD\"], John=\"LA\", Jack=\"SD\", Jeff=\"NYC\")\n    ['Jack is invited', 'Jeff is invited']\n    >>> invite([\"NYC\", \"SD\"], Jill=\"SF\", Jen=\"LA\", Jane=\"SLO\")\n    []\n    '''\n    return [str(x) + \" is invited\" for x in kwargs]\n    \n        \n", "a447838672@ucsd.edu": "\ndef invite(cities, **kwargs):\n    '''\n    Function that invites people if they reside in \n    certain cities\n\n    args:\n        cities (list): list of city names\n        **kwargs: names and cities of residence\n            key: person's name\n            value (string): city of residence\n    returns:\n        list of strings indicating who's invited\n\n    >>> invite([\"NYC\", \"SD\"], John=\"LA\", Jack=\"SD\", Jeff=\"NYC\")\n    ['Jack is invited', 'Jeff is invited']\n    >>> invite([\"NYC\", \"SD\"], Jill=\"SF\", Jen=\"LA\", Jane=\"SLO\")\n    []\n    '''\n    # YOUR CODE GOES HERE\n    \n        \n", "a6105138757@ucsd.edu": "\ndef invite(cities, **kwargs):\n    '''\n    Function that invites people if they reside in \n    certain cities\n\n    args:\n        cities (list): list of city names\n        **kwargs: names and cities of residence\n            key: person's name\n            value (string): city of residence\n    returns:\n        list of strings indicating who's invited\n\n    >>> invite([\"NYC\", \"SD\"], John=\"LA\", Jack=\"SD\", Jeff=\"NYC\")\n    ['Jack is invited', 'Jeff is invited']\n    >>> invite([\"NYC\", \"SD\"], Jill=\"SF\", Jen=\"LA\", Jane=\"SLO\")\n    []\n    '''\n    # YOUR CODE GOES HERE\n    names = []\n    \n    for names, kwargs in cities:\n        if names[cities] == kwargs:\n            names += (kwargs, \"is invited\")\n    return names\n\n    \n        \n"}, "Question 3": {"a5633598710@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    return f1(num1) == f2(num2) and f1(num2) == f2(num1)\n\n\n", "a666717958@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    return f1(num1) == f1(num2) and f2(num1) == f2(num2)\n\n\n", "a297452646@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    if f1(num1) == f2(num2):\n        return True\n    else:\n        return False\n\n\n", "a8377411410@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    if f1(num1)==f2(num2):\n        return True\n    else:\n        return False\n\n\n", "a334233638@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    one = f1\n    two = f2\n    if one(num1)== two(num2):\n        return True\n    else:\n        return False\n\n\n", "a949752993@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    if f1(num1) == f2(num2):\n        return True\n    return False\n\n\n", "a477315116@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    if f1(num1) == f1(num2) and f2(num1) == f2(num2) and f1(num1) == f2(num1):\n        return True\n    else:\n        return False\n\n\n", "a356716953@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    if f1(num1) == f2(num1) and f2(num2) == f2(num2):\n        return True\n    else:\n        return False\n\n\n", "a866168212@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    if (f1(num1) == f1(num2)) and (f2(num1) == f2(num2)):\n        return True\n    else:\n        return False\n\n\n", "a10105619371@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    return f1(num1) == f2(num2)\n\n\n", "a216415388@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    if num1 \n\n\n", "a6310946972@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    if f1(num1) == f2(num2):\n        return True\n    return False\n\n\n", "a2104927463@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    f1output = f1(num1)\n    f2output = f2(num2)\n\n    if f1output == f2output:\n        return True\n    else:\n        return False\n\n\n", "a410710103947@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    if f1(num1) == f2(num2) and f2(num1) == f1(num2):\n        return True\n    else:\n        return False\n\n", "a1046448838@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    return f1(num1) == f1(num2) and f2(num1) == f2(num2)\n\n\n", "a225864621@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    num1_func1 = f1(num1)\n    num1_func2 = f2(num1)\n    num2_func1 = f1(num2)\n    num2_func2 = f2(num2)\n    if num1_func1 != num2_func1:\n        return False\n    if num1_func2 != num2_func2:\n        return False\n    return True\n\n", "a447838672@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    a= [f1(num)for num in num1]\n    b= [f2(n) for n in num2]\n    if a==b:\n        return \"True\"\n    else:\n        return \"False\"\n\n\n", "a333868219@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    if f1(num1) == f2(num2):\n        return True\n    else:\n        return False\n    # YOUR CODE GOES HERE\n\n\n", "a6105138757@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    if f1(num1) == f2(num2):\n        return True\n    else:\n        return False\n\n\n", "a975813715@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    \n    if f1(num1) == f1(num2) == f2(num1) == f2(num2):\n        return True\n    else:\n        return False\n\n\n", "a4361103679@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    f = f1(num1)\n    s = f1(num2)\n    t = f2(num1)\n    x = f2(num2)\n\n    if f == s and f == t and f == x:\n        return True\n    else:\n        return False\n\n\n", "a1591016167@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    if f1(num1) == f2(num2):\n        return True\n    else:\n        return False\n\n\n", "a551476246@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    if f1(num1) == f1(num2):\n        return True\n    else:\n        return False\n\n\n", "a131453213@ucsd.edu": "\ndef equal_funcs(num1, num2, f1, f2):\n    '''\n    Function that checks whether two functions return\n    the same output for two inputs\n\n    args:\n        num1 (int): first input\n        num2 (int): second input\n        f1 (func): first function\n        f2 (func): second function\n    returns:\n        True if the functions return the same output\n        for both inputs, False otherwise\n\n    >>> equal_funcs(5, -5, lambda x: x * -1 if x < 0 else x, abs)\n    True\n    >>> equal_funcs(5, -5, lambda x: x * -1, abs)\n    False\n    '''\n    # YOUR CODE GOES HERE\n    return f1(num1)==f2(num2)\n\n"}, "Question 4": {"a447838672@ucsd.edu": "\ndef factorial(n):\n    '''\n    Function that recursively calculates factorial of a number\n\n    args:\n        n (int): positive integer\n    returns:\n        n! (n factorial)\n    \n    >>> factorial(1)\n    1\n    >>> factorial(5) # 5 * 4 * 3 * 2 * 1 = 120\n    120\n    '''\n    # YOUR CODE GOES HERE\n    if n==1:\n        return str(n)\n    return str(n) * factorial(n - 1)\n    \n    \n", "a8356575103@ucsd.edu": "\ndef factorial(n):\n    '''\n    Function that recursively calculates factorial of a number\n\n    args:\n        n (int): positive integer\n    returns:\n        n! (n factorial)\n    \n    >>> factorial(1)\n    1\n    >>> factorial(5) # 5 * 4 * 3 * 2 * 1 = 120\n    120\n    '''\n    # YOUR CODE GOES HERE\n    if n == 1 and n>0:\n        return 1\n    else:\n        return factorial(n*(n-1))\n    \n    \n"}}